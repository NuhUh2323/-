import asyncio
import logging
import random
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command

API_TOKEN = "8499852940:AAGlJ2Txa4rNkZ_3R2bgoPjfVZqA8BR8iYU"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

from aiogram.client.default import DefaultBotProperties  # –î–û–ë–ê–í–ò–¢–¨ –∏–º–ø–æ—Ä—Ç

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)


games = {}  # {chat_id: {...}}
last_bot_messages = {}  # chat_id -> message_id
DB_NAME = "roulette.db"

# ---------- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ----------
async def send_and_cleanup(chat_id, text, reply_markup=None, delay=5):
    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    last_msg_id = last_bot_messages.get(chat_id)
    if last_msg_id:
        try:
            await bot.delete_message(chat_id, last_msg_id)
        except:
            pass

    msg = await bot.send_message(chat_id, text, reply_markup=reply_markup)
    last_bot_messages[chat_id] = msg.message_id

    await asyncio.sleep(delay)
    try:
        await bot.delete_message(chat_id, msg.message_id)
        if last_bot_messages.get(chat_id) == msg.message_id:
            del last_bot_messages[chat_id]
    except:
        pass

# ---------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------
def action_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÅ –ö—Ä—É—Ç–∏—Ç—å –∏ –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å", callback_data="spin_shoot"),
            InlineKeyboardButton(text="üî´ –ü—Ä–æ—Å—Ç–æ –≤—ã—Å—Ç—Ä–µ–ª", callback_data="just_shoot")
        ]
    ])

def join_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_game")]
    ])

# ---------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ----------
async def init_db():
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                games_played INTEGER DEFAULT 0,
                games_won INTEGER DEFAULT 0,
                balance INTEGER DEFAULT 0
            )
        ''')
        await db.commit()

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
dp = Dispatcher()
@dp.message(Command(commands=["—Ä—É–ª–µ—Ç–∫–∞", "–∏–≥—Ä–∞", "–Ω–∞—á–∞—Ç—å"]))
async def start_game(msg: Message):
    if msg.chat.type not in {"group", "supergroup"}:
        await msg.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    chat_id = msg.chat.id
    if chat_id in games:
        await send_and_cleanup(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    games[chat_id] = {
        "players": [],
        "alive": [],
        "current": 0,
        "bullet_index": random.randint(0, 5),
        "chamber_position": 0,
        "registration_msg": None
    }

    reg_msg = await msg.reply("üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ‚è≥ 60 —Å–µ–∫—É–Ω–¥", reply_markup=join_keyboard())
    games[chat_id]["registration_msg"] = reg_msg

    for remaining in [50, 40, 30, 20, 10]:
        await asyncio.sleep(10)
        if chat_id not in games:
            return
        try:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=reg_msg.message_id,
                text=f"üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è! –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥",
                reply_markup=join_keyboard()
            )
        except:
            pass

    await start_round(chat_id)

@dp.message(Command("cancelgame"))
async def cancel_game(msg: Message):
    chat_id = msg.chat.id
    if chat_id in games:
        del games[chat_id]
        await send_and_cleanup(chat_id, "üö´ –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await send_and_cleanup(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")

@dp.message(Command("leaderboard"))
async def leaderboard(msg: Message):
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute('''
            SELECT username, games_won, balance FROM users
            ORDER BY balance DESC LIMIT 10
        ''')
        rows = await cursor.fetchall()

    if not rows:
        await send_and_cleanup(msg.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    text = "üèÜ <b>–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
    for i, (name, wins, balance) in enumerate(rows, 1):
        text += f"{i}. {name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ‚Äî –ü–æ–±–µ–¥: {wins}, üí∞ ${balance}\n"

    await send_and_cleanup(msg.chat.id, text)

@dp.message(Command("mystats"))
async def mystats(msg: Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(DB_NAME) as db:
        cursor = await db.execute('''
            SELECT games_played, games_won, balance FROM users
            WHERE user_id = ?
        ''', (user_id,))
        row = await cursor.fetchone()

    if not row:
        await send_and_cleanup(msg.chat.id, "–í—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏.")
        return

    played, won, balance = row
    await send_and_cleanup(
        msg.chat.id,
        f"üé≤ <b>–í–∞—à–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:</b>\n–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {played}\n–ü–æ–±–µ–¥: {won}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${balance}"
    )

@dp.callback_query(lambda c: c.data == "join_game")
async def join_game(callback: CallbackQuery):
    user = callback.from_user
    chat_id = callback.message.chat.id

    game = games.get(chat_id)
    if not game:
        await callback.answer("‚õî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    user_data = (user.id, user.username or user.full_name)
    if user_data in game["players"]:
        await callback.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    game["players"].append(user_data)
    await callback.answer("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    await send_and_cleanup(chat_id, f"üë§ {user_data[1]} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ.")

# ---------- –ò–≥—Ä–∞ ----------
async def start_round(chat_id):
    game = games.get(chat_id)
    if not game or len(game["players"]) < 2:
        await send_and_cleanup(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        games.pop(chat_id, None)
        return

    game["alive"] = game["players"][:]
    game["current"] = 0
    game["bullet_index"] = random.randint(0, 5)
    game["chamber_position"] = 0

    await send_and_cleanup(chat_id, f"üî´ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n–ò–≥—Ä–æ–∫–æ–≤: {len(game['alive'])}")
    await next_turn(chat_id)

async def next_turn(chat_id):
    game = games.get(chat_id)
    if not game or len(game["alive"]) < 2:
        if game and len(game["alive"]) == 1:
            winner = game["alive"][0]
            await send_and_cleanup(chat_id, f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner[1]}</b>! –û–Ω –ø–æ–ª—É—á–∞–µ—Ç $10.")
            await update_stats(winner[0], winner[1], win=True)
        games.pop(chat_id, None)
        return

    current = game["alive"][game["current"]]
    msg = await bot.send_message(
        chat_id,
        f"üëâ –•–æ–¥–∏—Ç <b>{current[1]}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=action_keyboard()
    )
    last_bot_messages[chat_id] = msg.message_id  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º

@dp.callback_query(lambda c: c.data in {"spin_shoot", "just_shoot"})
async def handle_shot(callback: CallbackQuery):
    user = callback.from_user
    chat_id = callback.message.chat.id
    game = games.get(chat_id)

    if not game:
        await callback.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    current_player = game["alive"][game["current"]]
    if user.id != current_player[0]:
        await callback.answer("‚õî –°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.")
        return

    spin = callback.data == "spin_shoot"
    if spin:
        game["chamber_position"] = random.randint(0, 5)

    fired = game["chamber_position"] == game["bullet_index"]

    if fired:
        await callback.message.edit_text(f"üí• <b>{current_player[1]}</b> –≤—ã—Å—Ç—Ä–µ–ª–∏–ª... –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª!")
        game["alive"].pop(game["current"])
        await update_stats(user.id, user.username or user.full_name, win=False)
        game["bullet_index"] = random.randint(0, 5)
        game["chamber_position"] = 0
        if game["current"] >= len(game["alive"]):
            game["current"] = 0
    else:
        await callback.message.edit_text(f"üòÖ <b>{current_player[1]}</b> –≤—ã—Å—Ç—Ä–µ–ª–∏–ª –∏ –≤—ã–∂–∏–ª.")
        game["chamber_position"] = (game["chamber_position"] + 1) % 6
        game["current"] = (game["current"] + 1) % len(game["alive"])

    await next_turn(chat_id)

# ---------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------
async def update_stats(user_id, username, win=False):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            INSERT INTO users (user_id, username)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO NOTHING
        ''', (user_id, username))
        await db.execute('''
            UPDATE users
            SET games_played = games_played + 1
            WHERE user_id = ?
        ''', (user_id,))
        if win:
            await db.execute('''
                UPDATE users
                SET games_won = games_won + 1, balance = balance + 10
                WHERE user_id = ?
            ''', (user_id,))
        await db.commit()

# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    logging.basicConfig(level=logging.INFO)
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
